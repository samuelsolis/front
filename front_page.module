<?php

/**
 *
 * This module allows the site admin to set advanced front page settings.
 *
 * This version is for Drupal 7. Earlier versions can be found at http://drupal.org/project/front.
 *
 * This module version was developed by timhilliard and various members of the drupal community.
 *
 * If you have any ideas/patches or requests, please post them at http://drupal.org/project/issues/front.
 *
 */

/**
 * Implements hook_help().
 */
function front_page_help($section) {
  switch ($section) {
    case 'admin/config/front':
      $roles = user_roles();
      $front_page_data = front_page_get_all();

      $special_note = '';
      if (count($roles) >= 3) {
        $special_note = '<fieldset>' . t('<legend><span class="fieldset-legend">front page by role usage</span></legend><div class="fieldset-wrapper"><p><strong>Note:</strong>When using the front pages by role option, please note that if a user has multiple roles the first role match will determine which front page they see. Here is the order that the roles will be checked (from left to right).</p>') . '<p>';
        $special_note_roles = array();
        foreach ($front_page_data as $role_id => $role) {
          $special_note_roles[] = "<strong>$role_id</strong> $roles[$role_id]";
        }
        $special_note .= implode(' | ', $special_note_roles);
        $special_note .= '</p>' . t('<p>The default setting for new roles is SKIP.</p>') . '</div></fieldset>';
      }
      return t('<p>Setup custom front pages for your site. Click on the option to expand the form and customise your settings.</p><p><em>Anonymous User</em> = visitor not logged in  | <em>Authenticated User</em> = visitor who is logged in</p>') . $special_note;
    case 'admin/config/front/arrange':
      return t('<p>Arrange the order in which roles will be checked for custom front page settings. Roles will be processed from top to bottom. To enable other roles you must first enable them in the ' . l('Settings', 'admin/config/front') . ' tab</p>');
  }
}

/**
 * Implements hook_menu().
 */
function front_page_menu() {
  // Front page settings.
  $items['admin/config/front'] = array(
    'title' => 'Front Page',
    'description' => 'Administer custom front page settings.',
    'position' => 'right',
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('front_page_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'front_page.admin.inc',
  );
  $items['admin/config/front/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/front/arrange'] = array(
    'title' => 'Arrange',
    'description' => 'Ability to re-arrange what order front page roles are processed.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('front_page_admin_arrange_form'),
    'access arguments' => array('administer menu'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'front_page.admin.inc',
    'weight' => 1,
  );
  $items['front_page'] = array(
    'title' => '',
    'page callback' => 'front_page',
    'access callback' => TRUE,
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function front_page_init() {
  global $_front_page, $conf;

  // let administrator know that there is a config error.
  if ($conf['site_frontpage'] == 'front_page' && user_access('administer menu')) {
    drupal_set_message(t('There is a configuration error. The home page should not be set to the path "front_page". Please change this !link', array('!link' => l('here', 'admin/config/system/site-information'))), 'error');
  }

  if (variable_get('front_page_enable', 0) && drupal_is_front_page()) {
    $_front_page = front_page_get_by_role();
  }

  if (user_access('administer menu') && preg_match('@^front_page/preview/([0-9]+)$@', $_GET['q'], $match)) {
    $_front_page = front_page_get_by_rid($match[1]);
  }

  if ($_front_page) {
    switch ($_front_page['mode']) {
      case 'themed':
      case 'full':
        $_GET['q'] = 'front_page';
        // need to set variable site_frontpage to current path so that it thinks it is the front page.
        $conf['site_frontpage'] = $_GET['q'];
        break;

      case 'redirect':
        $url = front_page_parse_url($_front_page['data']);
        drupal_goto($url['path'], $url['options']);
        break;

      case 'alias':
        $url = front_page_parse_url($_front_page['data']);
        $_GET['q'] = drupal_get_normal_path($url['path']);
        // need to set variable site_frontpage to current path so that it thinks it is the front page.
        $conf['site_frontpage'] = $_GET['q'];
        break;
    }

    // turn caching off for this page as it is dependant on role.
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/*
 * Function to handle the display of the front page themed and full types.
 */

function front_page($role_id = NULL) {
  // $_front_page variable should already have been loaded in front_page_init() function.
  global $_front_page, $user;

  if (is_numeric($role_id)) {
    $_front_page = front_page_get_by_rid($role_id);
  }

  if ($_front_page) {
    $mission_text = variable_get('special_notice_text', '');
    if (!empty($mission_text)) {
      // calculate if user has visited recent enough
      $tz = date_default_timezone_get();
      date_default_timezone_set('UTC');
      $time = strtotime('-' . variable_get('special_notice_time', '1 day'));
      date_default_timezone_set($tz);
      $mission = '';
      if ($time > $user->access) {
        $mission = '<div id="mission">' . $mission_text . '</div>';
      }
    }
    switch ($_front_page['mode']) {
      case 'themed':
        return $mission . check_markup($_front_page['data'], $_front_page['filter_format']);

      case 'full':
        print $mission . check_markup($_front_page['data'], $_front_page['filter_format']);
        exit;
    }
  }

  // set page not found as there was no themed or full option set for the front page.
  drupal_not_found();
  exit;
}

/*
 * Function to parse a full URL including GET variables and fragment
 * to an array ready for drupal_goto(), url(), or l() functions.
 */

function front_page_parse_url($path) {
  $url['path'] = $path;
  $url['options'] = array();
  if (preg_match('@^(?P<path>[^?#]+)(\?(?P<query>[^#]*))?(#(?P<fragment>.*))?$@', $path, $match)) {
    $url['path'] = $match['path'];
    if (!empty($match['query'])) {
      foreach (explode('&', $match['query']) as $query_part) {
        list($key, $value) = explode('=', $query_part);
        $url['options']['query'][$key] = $value;
      }
    }
    if (!empty($match['fragment'])) {
      $url['options']['fragment'] = $match['fragment'];
    }
  }
  return $url;
}

/*
 * Function to return the first role enabled in front page, ordered by weight.
 */

function front_page_get_by_role($index = 0, $number = 1) {
  global $user;
  $result = db_select('front_page', 'fp')
          ->fields('fp')
          ->condition('rid', array_keys($user->roles))
          ->condition('mode', '', '<>')
          ->orderBy('weight', 'ASC')
          ->orderBy('rid', 'DESC')
          ->range($index, $number)
          ->execute()
          ->fetchAssoc();
  return $result;
}

/*
 * Function to return the first role enabled in front page, ordered by weight.
 */

function front_page_get_by_rid($rid) {
  $result = db_select('front_page', 'fp')
          ->fields('fp')
          ->condition('rid', $rid)
          ->condition('mode', '', '<>')
          ->execute()
          ->fetchAssoc();
  return $result;
}

/*
 * Function to return all the roles in front page, ordered by weight.
 */

function front_page_get_all() {
  global $user;
  $result = db_select('front_page', 'fp')
          ->fields('fp')
          ->orderBy('weight', 'ASC')
          ->orderBy('rid', 'DESC')
          ->execute()
          ->fetchAllAssoc('rid', PDO::FETCH_ASSOC);
  return $result;
}

/**
 * Implements hook_page_url_outbound_alter().
 *
 * This alters anything parsed through the url() function to replace the <front> string
 *  with an alternative string instead of the site_frontpage setting.
 */
function front_page_url_outbound_alter(&$path, &$options, &$original_path) {
  if (($path == '<front>' || empty($path)) && variable_get('front_page_breadcrumb', 0)) {
    $path = variable_get('front_page_breadcrumb_redirect', '');
    $original_path = $path;
  }
}

/**
 * Implements hook_theme().
 */
function front_page_theme() {
  return array(
    'front_page_admin_arrange_form' => array(
      'file' => 'front_page.admin.inc',
      'render element' => 'form',
    ),
  );
}