<?php

/**
 * @file
 * This module allows the site admin to set advanced front page settings.
 *
 * This version is for Drupal 8.
 * Earlier versions can be found at http://drupal.org/project/front.
 *
 * This module version was developed by timhilliard and various members
 * of the drupal community.
 *
 * If you have any ideas/patches or requests,
 * please post them at http://drupal.org/project/issues/front.
 */

/**
 * Implements hook_help().
 */
function front_page_help($section) {
  switch ($section) {
    case 'admin/config/front/settings':
      return t('<p>Setup custom front pages for your site.</p>');

    case 'admin/config/front/arrange':
      return t('<p>Arrange the order in which roles will be checked for custom front page settings. Roles will be processed from top to bottom. To enable other roles you must first enable them in the !link.</p>', array('!link' => l(t('Settings tab'), 'admin/config/front/settings')));

    case 'admin/config/front/home-links':
      return t('<p>If a HOME link is set, the &lt;front&gt; placeholder will be replaced with this value instead of the standard front page.</p>');
  }
}

/**
 * Implements hook_menu().
 */
function front_page_menu() {

  // Front page settings.
  $items['admin/config/front'] = array(
    'title' => 'Front Page',
    'description' => 'Configure front page.',
    'position' => 'right',
    'weight' => -15,
    'route_name' => 'front_page.admin_index',
  );

  $items['admin/config/front/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer custom front page settings.',
    'weight' => 0,
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'route_name' => 'front_page.settings',
  );

  $items['admin/config/front/arrange'] = array(
    'title' => 'Arrange',
    'description' => 'Ability to re-arrange what order front page roles are processed.',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 1,
    'route_name' => 'front_page.arrange',
  );

  $items['admin/config/front/home-links'] = array(
    'title' => 'Home links',
    'description' => 'Allows you to change the location of the &lt;front&gt; placeholder.',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
    'weight' => 2,
    'route_name' => 'front_page.home_links',
  );

  $items['main'] = array(
    'title' => '',
    'type' => MENU_SUGGESTED_ITEM,
    'route_name' => 'front_page.main',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function front_page_permission() {
  return array(
    'administer front page' => array(
      'title' => t('Administer front page'),
      'description' => t('Allow users to make changes to the front page settings.'),
    ),
  );
}

/**
 * Function to parse a full URL including GET variables and fragment
 *
 * to an array ready for drupal_goto(), url(), or l() functions.
 */
function front_page_parse_url($path) {
  $url['path'] = $path;
  $url['options'] = array();
  if (preg_match('@^(?P<path>[^?#]+)(\?(?P<query>[^#]*))?(#(?P<fragment>.*))?$@', $path, $match)) {
    $url['path'] = $match['path'];
    if (!empty($match['query'])) {
      foreach (explode('&', $match['query']) as $query_part) {
        list($key, $value) = explode('=', $query_part);
        $url['options']['query'][$key] = $value;
      }
    }
    if (!empty($match['fragment'])) {
      $url['options']['fragment'] = $match['fragment'];
    }
  }
  return $url;
}

/**
 * Function to return the first role enabled in front page, ordered by weight.
 */
function front_page_get_by_role($index = 0, $number = 1) {
  $roles = \Drupal::currentUser()->getRoles();
  $result = db_select('front_page', 'fp')
    ->fields('fp')
    ->condition('rid', $roles)
    ->condition('mode', '', '<>')
    ->orderBy('weight', 'ASC')
    ->orderBy('rid', 'DESC')
    ->range($index, $number)
    ->execute()
    ->fetchAssoc();
  return $result;
}

/**
 * Function to return the first role enabled in front page, ordered by weight.
 */
function front_page_get_by_rid($rid) {
  $result = db_select('front_page', 'fp')
    ->fields('fp')
    ->condition('rid', $rid)
    ->condition('mode', '', '<>')
    ->execute()
    ->fetchAssoc();
  return $result;
}

/**
 * Function to return all the roles in front page, ordered by weight.
 */
function front_page_get_all() {
  global $user;
  $result = db_select('front_page', 'fp')
    ->fields('fp')
    ->orderBy('weight', 'ASC')
    ->orderBy('rid', 'DESC')
    ->execute()
    ->fetchAllAssoc('rid', PDO::FETCH_ASSOC);
  return $result;
}

/**
 * Implements hook_page_url_outbound_alter().
 *
 * This alters anything parsed through the url() function to replace the <front>
 * string with an alternative string instead of the site_frontpage setting.
 */
function front_page_url_outbound_alter(&$path, &$options, &$original_path) {
  // Check if path is set to 'front_page' as this is our virtual home
  // page and doesn't work properly unless used from home page.
  if ($path == 'main') {
    $original_path = $path = '';
  }
  $config  = $this->config('front_page.settings');
  $newpath = $config->get('home_link_path', '');
  if (($path == '<front>' || empty($path)) && !empty($newpath)) {
    $original_path = $path = $newpath;
  }
}

/**
 * Implements hook_theme().
 */
function front_page_theme() {
  return array(
    'front_page_admin_arrange_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_user_role_delete().
 */
function front_page_user_role_delete($role) {
  // Delete Front configuration for the role being deleted.
  db_delete('front_page')
    ->condition('rid', $role->rid)
    ->execute();
}

/**
 * Returns HTML for the front page arrange form into a table.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 */
function theme_front_page_admin_arrange_form($variables) {
  $form = $variables['form'];

  drupal_add_tabledrag('front-page-arrange', 'order', 'sibling', 'front-page-weight');

  $header = array(
    t('Role'),
    t('Mode'),
    t('Preview'),
    t('Enabled'),
    t('Weight'),
  );

  $rows = array();
  foreach (element_children($form['roles']) as $rid) {
    $element = &$form['roles'][$rid];

    // Add special classes to be used for tabledrag.js.
    $element['weight']['#attributes']['class'] = array('front-page-weight');

    $row = array();
    $row[] = drupal_render($element['title']);
    $row[] = drupal_render($element['mode']);
    $row[] = drupal_render($element['preview']);
    $row[] = drupal_render($element['enabled']);
    $row[] = drupal_render($element['weight']);

    $row = array_merge(array('data' => $row), $element['#attributes']);
    $row['class'][] = 'draggable';
    $rows[] = $row;
  }
  $output = '';
  if (empty($rows)) {
    $rows[] = array(array('data' => 'no roles', 'colspan' => '5'));
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'front-page-arrange')));
  $output .= drupal_render_children($form);
  return $output;
}
